# vim:set sw=2 ft=ruby
fastlane_version "1.68.0"
default_platform :ios

platform :ios do
    before_all do
            `osascript -e 'tell app "Simulator" to quit'`
            `osascript -e 'tell app "Xcode" to quit'`
            sleep(5)
            ENV["DEVELOPER_DIR"] = "/Applications/Xcode.app"
            wait_xcrun
    end

    desc "Runs all the tests"
    lane :test do
        load_keys
        cocoapods
        sigh(
            output_path: "./tmp",
            development: true
        )
        test_on_simulator
    end

    lane :local_test do
        cocoapods
        test_on_simulator
    end

    desc "Runs all the tests on Simulators"
    def test_on_simulator
        begin
            scan(
                skip_build: true,
                scheme: "MobileMessagingExample",
                devices: ["iPhone 5 (8.4)"]
                )
            scan(
                skip_build: true,
                scheme: "MobileMessagingExample",
                devices: ["iPhone 6 (10.0)"]
                )
            scan(
                skip_build: true,
                scheme: "MobileMessagingExample",
                devices: ["iPhone 7 (11.0)"]
                )
        end
    end

    desc "Runs all the tests on iPhone 5"
    def test_on_device 
        begin
            scan(
                skip_build: true,
                scheme: "MobileMessagingExample_Tests_Device",
                destination: "id=f0092e6e876ebb2388e0b7001b2d7d9ffa47e6e1" #iPhone 5
            )
        end
    end

    def change_log_since_last_tag
        # http://git-scm.com/docs/pretty-formats
        # <short hash> <commit title>
        return changelog_from_git_commits(pretty: '%h %s')
    end

    def load_keys
        begin
            import("keys")
        rescue => exception
            UI.important("fastlane/keys file not found. To use this Fastfile, copy fastlane/keys.template into fastlane/keys and fill in the values, will try to use ENV variables")
            ENV["SIGH_USERNAME"] = ENV["APPLE_ID"]
            ENV["PILOT_APPLE_ID"] = ENV["APPLE_ID"]
            ENV["DELIVER_USERNAME"] = ENV["APPLE_ID"]
        end
    end

    desc "Build a snapshot version"
    lane :snapshot do |options|
        load_keys
        only_build = options[:only_build]

        unless only_build
            increment_build_number(
              build_number: (Time.new.to_r * 1000).round.to_s
            )
        end

        cocoapods

        sigh(
            output_path: "./tmp",
            development: true
        )
        
        unless options[:no_tests]
            test_on_simulator
        end

        unless options[:no_device_tests]
            test_on_device
        end

        unless only_build
            clean_build_artifacts
            
            unless options[:no_github]
                desc "Pushing to Github repo master"
                sh "git push github HEAD:master"
            end
        end
    end

    desc "Build a release version, publish to Cocoapods"
    lane :release do |options|
    	release_notes = options[:release_notes]
		
		if release_notes.to_s.strip.empty?
			desc "You have not provided release notes!"
			return
		end

        load_keys
        only_build = options[:only_build]

        unless only_build
            ensure_git_status_clean

            unless options[:version_number] or options[:release_type]
                UI.error("You must specify :release_type (patch, minor, major) or a full version string in :version_number")
                raise "You must specify :release_type (patch, minor, major) or a full version string in :version_number"
            end

            custom_version_number = options[:version_number]
            if custom_version_number
                increment_version_number(version_number: custom_version_number)
            else
                increment_version_number(bump_type: options[:release_type])
            end

            version_number = lane_context[SharedValues::VERSION_NUMBER]
            build_number = increment_build_number
            new_version_tag = "#{version_number}"
        end

        cocoapods

        unless options[:no_tests]
            test_on_simulator
        end

        unless options[:no_device_tests]
            test_on_device
        end
        
        sigh(
            output_path: "./tmp",
            development: true
        )

        unless only_build
            clean_build_artifacts

            change_log = change_log_since_last_tag

            commit_msg = "Version bump to #{version_number}"
            commit_version_bump(
                message: commit_msg,
                xcodeproj: "MobileMessagingExample.xcodeproj"
            )

            add_git_tag(
                tag: new_version_tag
            )

            podspec_path = ENV["WORKSPACE"]+"/MobileMessaging.podspec"
        
            version_bump_podspec(
                path: podspec_path,
                version_number: version_number
            )

            desc "Bumping lib version variable"

            swift_version_path = ENV["WORKSPACE"]+"/Classes/Core/MMVersion.swift"
            sh "perl -i -p -e 's/(?<=\")\\d+(?:.\\d+)+(?=\")/#{version_number}/g;' #{swift_version_path}"

            desc "Comitting changes"
            sh "git commit --amend -m \"#{commit_msg}\" \"#{podspec_path}\" \"#{swift_version_path}\""

            desc "Pushing to Stash repo master"
            sh "git push origin HEAD:master --tags"

            unless options[:no_github]
                desc "Pushing to Github repo master"
                sh "git push github HEAD:master"

                set_github_release(
                	description: release_notes,
                    repository_name: "infobip/mobile-messaging-sdk-ios",
                    api_token: ENV["GITHUB_API_TOKEN"],
                    tag_name: version_number,
                    name: version_number
                )

                pod_push(
                     path: podspec_path,
                     allow_warnings: true
                )
            end
        end
    end
end
